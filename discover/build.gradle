plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'java'
    id 'application'
}

mainClassName = 'discover.DiscoverApplication'

group = ''
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4' // For the Basic DataSource interface
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.44' // For the JDBC

    implementation 'com.google.code.gson:gson:2.8.5'

    // Local Libs
    compile fileTree(dir: 'lib', include: ['*.jar'])
}

// Change run task's default input to System.in
run {
    standardInput = System.in
}


// Check if we need to fetch a dependency
task sharedCheck() {
    // Create a file representing the shared lib file
    def name = "shared-0.1.0"
    def sharedLib = new File("lib/${name}.jar")

    // If shared Lib does not exists then fetch it from gh
    if ( !sharedLib.exists() ) {
        println "Compile SharedLib and put in the lib folder"
    }
    else {
        println "SharedLib present!"
    }
}

// Make java compile task depends on check shared lib
compileJava.dependsOn( sharedCheck )



// source : https://stackoverflow.com/questions/25309250/execute-gradle-shadowjar-task-twice-in-same-build-file
task thorJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    group = "shadow"
    manifest.attributes 'Main-Class': 'discover.DiscoverApplication'
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
    configurations = [project.configurations.runtime]
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
    destinationDir = file("../../thor/systemsJars")  // Set output to be the SystemsJars folder of thor
}

// The testing jar
task testJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    group = "shadow"
    manifest.attributes 'Main-Class': 'discover.testing.TestingMain'
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
    configurations = [project.configurations.runtime]
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}



// /\/\/\/\/\/\/\
// | RUN TASKS  |
// \/\/\/\/\/\/\/


task runExperiments(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'discover.testing.TestingMain'
}